name: Build ACE-RFID (macOS Universal)

on:
  push:
    branches: [ macos ]
  pull_request:
    branches: [ macos ]

jobs:
  build:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up code signing certificate and provisioning profile
        env:
          MAC_CERTIFICATE_BASE64: ${{ secrets.MAC_CERTIFICATE_BASE64 }}
          MAC_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          MAC_PROVISION_PROFILE_BASE64: ${{ secrets.MAC_PROVISION_PROFILE_BASE64 }}
        run: |
          # Decode and import the certificate
          echo "$MAC_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p "temp_password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp_password" build.keychain
          security import certificate.p12 -k build.keychain -P "$MAC_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k "temp_password" build.keychain
          # Decode and install provisioning profile (if present)
          if [ -n "$MAC_PROVISION_PROFILE_BASE64" ]; then
            echo "$MAC_PROVISION_PROFILE_BASE64" | base64 --decode > profile.provisionprofile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp profile.provisionprofile ~/Library/MobileDevice/Provisioning\ Profiles/
          fi
          # List identities for debug
          security find-identity -v -p codesigning

      - name: Install dependencies
        run: |
          brew update
          brew install autoconf automake libtool pkg-config

      - name: Build libusb for x86_64
        run: |
          git clone https://github.com/libusb/libusb.git
          cd libusb
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          export CC="clang -arch x86_64 -isysroot $SDKROOT"
          ./bootstrap.sh
          ./configure --host=x86_64-apple-darwin --prefix=$GITHUB_WORKSPACE/libusb_x86_64
          make
          make install

      - name: Build libusb for arm64
        run: |
          cd libusb
          make clean
          export MACOSX_DEPLOYMENT_TARGET=11.0
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          export CC="clang -arch arm64 -isysroot $SDKROOT"
          ./configure --host=arm-apple-darwin --prefix=$GITHUB_WORKSPACE/libusb_arm64 --disable-dependency-tracking
          make
          make install

      - name: Create universal libusb
        run: |
          lipo -create $GITHUB_WORKSPACE/libusb_x86_64/lib/libusb-1.0.0.dylib $GITHUB_WORKSPACE/libusb_arm64/lib/libusb-1.0.0.dylib -output $GITHUB_WORKSPACE/libusb-1.0.0.dylib

      - name: Build libusb-compat for x86_64
        run: |
          git clone https://github.com/libusb/libusb-compat-0.1.git
          cd libusb-compat-0.1
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          export CC="clang -arch x86_64 -isysroot $SDKROOT"
          export LDFLAGS="-L$GITHUB_WORKSPACE -lusb-1.0.0"
          export CPPFLAGS="-I$GITHUB_WORKSPACE/libusb_x86_64/include"
          ./bootstrap.sh
          ./configure --host=x86_64-apple-darwin --prefix=$GITHUB_WORKSPACE/libusb_compat_x86_64
          make
          make install

      - name: Build libusb-compat for arm64
        run: |
          cd libusb-compat-0.1
          make clean
          export MACOSX_DEPLOYMENT_TARGET=11.0
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          export CC="clang -arch arm64 -isysroot $SDKROOT"
          export LDFLAGS="-L$GITHUB_WORKSPACE -lusb-1.0.0"
          export CPPFLAGS="-I$GITHUB_WORKSPACE/libusb_arm64/include"
          ./configure --host=arm-apple-darwin --prefix=$GITHUB_WORKSPACE/libusb_compat_arm64 --disable-dependency-tracking
          make
          make install

      - name: Create universal libusb-compat
        run: |
          lipo -create $GITHUB_WORKSPACE/libusb_compat_x86_64/lib/libusb-0.1.4.dylib $GITHUB_WORKSPACE/libusb_compat_arm64/lib/libusb-0.1.4.dylib -output $GITHUB_WORKSPACE/libusb-0.1.4.dylib

      - name: Build libnfc for x86_64
        run: |
          git clone https://github.com/nfc-tools/libnfc.git
          cd libnfc
          autoreconf -vis || true
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          export CC="clang -arch x86_64 -isysroot $SDKROOT"
          export LDFLAGS="-L$GITHUB_WORKSPACE -lusb-0.1.4 -lusb-1.0.0"
          export CPPFLAGS="-I$GITHUB_WORKSPACE/libusb_compat_x86_64/include -I$GITHUB_WORKSPACE/libusb_x86_64/include"
          export PKG_CONFIG_PATH="$GITHUB_WORKSPACE/libusb_x86_64/lib/pkgconfig:$GITHUB_WORKSPACE/libusb_arm64/lib/pkgconfig"
          ln -sf $GITHUB_WORKSPACE/libusb-1.0.0.dylib $GITHUB_WORKSPACE/libusb-1.0.dylib
          ln -sf $GITHUB_WORKSPACE/libusb-1.0.0.dylib $GITHUB_WORKSPACE/libusb.dylib
          ./configure --host=x86_64-apple-darwin --prefix=$GITHUB_WORKSPACE/libnfc_x86_64
          make
          make install

      - name: Build libnfc for arm64
        run: |
          cd libnfc
          make clean
          export MACOSX_DEPLOYMENT_TARGET=11.0
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          export CC="clang -arch arm64 -isysroot $SDKROOT"
          export LDFLAGS="-L$GITHUB_WORKSPACE -lusb-0.1.4 -lusb-1.0.0"
          export CPPFLAGS="-I$GITHUB_WORKSPACE/libusb_compat_arm64/include -I$GITHUB_WORKSPACE/libusb_arm64/include"
          export PKG_CONFIG_PATH="$GITHUB_WORKSPACE/libusb_x86_64/lib/pkgconfig:$GITHUB_WORKSPACE/libusb_arm64/lib/pkgconfig"
          ln -sf $GITHUB_WORKSPACE/libusb-1.0.0.dylib $GITHUB_WORKSPACE/libusb-1.0.dylib
          ln -sf $GITHUB_WORKSPACE/libusb-1.0.0.dylib $GITHUB_WORKSPACE/libusb.dylib
          ./configure --host=arm-apple-darwin --prefix=$GITHUB_WORKSPACE/libnfc_arm64 --disable-dependency-tracking
          make
          make install

      - name: Create universal libnfc
        run: |
          lipo -create $GITHUB_WORKSPACE/libnfc_x86_64/lib/libnfc.6.dylib $GITHUB_WORKSPACE/libnfc_arm64/lib/libnfc.6.dylib -output $GITHUB_WORKSPACE/libnfc_universal.dylib

      - name: Copy libnfc headers
        run: |
          mkdir -p $GITHUB_WORKSPACE/include
          cp -R libnfc/include/nfc $GITHUB_WORKSPACE/include/

      - name: Symlink libnfc universal to expected name
        run: |
          ln -sf $GITHUB_WORKSPACE/libnfc_universal.dylib $GITHUB_WORKSPACE/libnfc.6.dylib

      - name: Copy libnfc.6.dylib to Xcode project dir
        run: |
          mkdir -p $GITHUB_WORKSPACE/MacOS/ACE-RFID
          cp $GITHUB_WORKSPACE/libnfc.6.dylib $GITHUB_WORKSPACE/MacOS/ACE-RFID/

      - name: Build ACE-RFID.xcodeproj (Universal)
        run: |
          export LIBRARY_SEARCH_PATHS="$GITHUB_WORKSPACE"
          export HEADER_SEARCH_PATHS="$GITHUB_WORKSPACE/include"
          export DYLD_LIBRARY_PATH="$GITHUB_WORKSPACE"
          xcodebuild -project MacOS/ACE-RFID.xcodeproj -scheme ACE-RFID -configuration Release ARCHS="x86_64 arm64" ONLY_ACTIVE_ARCH=NO HEADER_SEARCH_PATHS="$HEADER_SEARCH_PATHS" LIBRARY_SEARCH_PATHS="$LIBRARY_SEARCH_PATHS" OTHER_CFLAGS="-I$GITHUB_WORKSPACE/include" OTHER_SWIFT_FLAGS="-I$GITHUB_WORKSPACE/include" OTHER_LDFLAGS="-L$GITHUB_WORKSPACE"

      - name: Archive app
        run: |
          xcodebuild -project MacOS/ACE-RFID.xcodeproj -scheme ACE-RFID -configuration Release -archivePath $GITHUB_WORKSPACE/ACE-RFID.xcarchive archive HEADER_SEARCH_PATHS="$HEADER_SEARCH_PATHS" LIBRARY_SEARCH_PATHS="$LIBRARY_SEARCH_PATHS" OTHER_CFLAGS="-I$GITHUB_WORKSPACE/include" OTHER_SWIFT_FLAGS="-I$GITHUB_WORKSPACE/include" OTHER_LDFLAGS="-L$GITHUB_WORKSPACE"

      - name: Find .xcarchive file
        id: find_xcarchive
        run: |
          set -e
          found=$(find $GITHUB_WORKSPACE -name '*.xcarchive' | head -n 1)
          if [ -z "$found" ]; then
            echo "::warning::No .xcarchive file found after archive step."
          else
            echo "Found archive: $found"
            echo "archive_path=$found" >> $GITHUB_OUTPUT
            # Try to find the main app binary inside the archive and check its architectures
            app_binary=$(find "$found" -type f -name ACE-RFID -print | head -n 1)
            if [ -n "$app_binary" ]; then
              echo "Checking architectures for $app_binary:"
              lipo -info "$app_binary"
              # Copy libnfc.6.dylib into Frameworks directory of the app bundle
              frameworks_dir=$(dirname "$app_binary")/../Frameworks
              mkdir -p "$frameworks_dir"
              cp $GITHUB_WORKSPACE/libnfc.6.dylib "$frameworks_dir/libnfc.6.dylib"
              # Update ACE-RFID binary to use relative path for libnfc.6.dylib
              install_name_tool -change /Users/*/libnfc.6.dylib @executable_path/../Frameworks/libnfc.6.dylib "$app_binary"
              echo "Patched ACE-RFID binary to use @executable_path/../Frameworks/libnfc.6.dylib"
              # Create DMG from .app using correct path
              app_path="$found/Products/Applications/ACE-RFID.app"
              dmg_path="$GITHUB_WORKSPACE/ACE-RFID.dmg"
              hdiutil create -volname "ACE-RFID" -srcfolder "$app_path" -ov -format UDZO "$dmg_path"
              echo "dmg_path=$dmg_path" >> $GITHUB_OUTPUT
              # Install create-dmg and create drag-to-install DMG
              npm install -g create-dmg
              # Prepare background image (optional, use default if not present)
              bg_img="$GITHUB_WORKSPACE/docs/Filament/app_add.jpg"
              if [ ! -f "$bg_img" ]; then
                bg_img=""
              fi
              drag_dmg_path="$GITHUB_WORKSPACE/ACE-RFID-drag-to-install.dmg"
              set -x
              if [ ! -d "$app_path" ]; then
                echo "ERROR: .app not found at $app_path"
                exit 1
              fi
              if [ -z "$bg_img" ]; then
                create-dmg "$app_path" "$GITHUB_WORKSPACE" --overwrite --dmg-title="ACE-RFID" --icon "ACE-RFID.app" 140 120 --app-drop-link 500 120 --window-size 640 400 --icon-size 128 --hide-extension "ACE-RFID.app"
              else
                create-dmg "$app_path" "$GITHUB_WORKSPACE" --overwrite --dmg-title="ACE-RFID" --icon "ACE-RFID.app" 140 120 --app-drop-link 500 120 --window-size 640 400 --icon-size 128 --background "$bg_img" --hide-extension "ACE-RFID.app"
              fi
              set +x
              # Find the DMG file just created
              drag_dmg_path=$(ls -t "$GITHUB_WORKSPACE"/*.dmg | head -n 1)
              if [ ! -f "$drag_dmg_path" ]; then
                echo "ERROR: Drag-to-install DMG was not created at $drag_dmg_path"
                exit 1
              fi
              echo "drag_dmg_path=$drag_dmg_path" >> $GITHUB_OUTPUT
            else
              echo "::warning::No ACE-RFID binary found in archive for lipo check."
            fi
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ACE-RFID-macOS-build
          path: ${{ steps.find_xcarchive.outputs.archive_path }}

      - name: Upload DMG package
        uses: actions/upload-artifact@v4
        with:
          name: ACE-RFID-macOS-dmg
          path: ${{ steps.find_xcarchive.outputs.dmg_path }}

      - name: Upload Drag-to-Install DMG
        uses: actions/upload-artifact@v4
        with:
          name: ACE-RFID-macOS-drag-to-install-dmg
          path: ${{ steps.find_xcarchive.outputs.drag_dmg_path }}
